Python iteratorlari
Iterator - bu sanab bo'ladigan qiymatlarni o'z ichiga olgan ob'ekt.

Iterator - bu takrorlanadigan ob'ekt, ya'ni siz barcha qiymatlar bo'ylab o'tishingiz mumkin.

Texnik jihatdan, Pythonda iterator - bu iterator protokolini amalga oshiradigan ob'ekt bo'lib, u usullar __iter__() va usullardan iborat __next__().


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Iterator va takrorlanuvchi

Ro'yxatlar, kortejlar, lug'atlar va to'plamlar takrorlanadigan ob'ektlardir. Ular iteratorni olishingiz mumkin bo'lgan takrorlanadigan konteynerlardir .

Ushbu ob'ektlarning barchasi iter() iteratorni olish uchun ishlatiladigan usulga ega:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Kortejdan iteratorni qaytaring va har bir qiymatni chop eting:

mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Hatto satrlar ham takrorlanadigan ob'ektlardir va iteratorni qaytarishi mumkin:

Misol
Satrlar, shuningdek, belgilar ketma-ketligini o'z ichiga olgan takrorlanadigan ob'ektlardir:

mystr = "banana"
myit = iter(mystr)

print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Iterator orqali aylanish
Biz fortakrorlanadigan ob'ektni takrorlash uchun tsikldan ham foydalanishimiz mumkin:

Misol
Kortej qiymatlarini takrorlang:

mytuple = ("apple", "banana", "cherry")

for x in mytuple:
  print(x)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Misol
Satr belgilarini takrorlang:

mystr = "banana"

for x in mystr:
  print(x)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

For loop aslida iterator ob'ektini yaratadi va har bir sikl uchun next() usulini bajaradi.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Iterator yarating
Ob'ektni/sinfni iterator sifatida yaratish uchun siz usullarni __iter__()va __next__()ob'ektingizga amal qilishingiz kerak.

Python sinflari/ob'ektlari bo'limida bilib olganingizdek , barcha sinflarda __init__()ob'ekt yaratilayotganda bir oz ishga tushirishni amalga oshirish imkonini beruvchi funksiya mavjud .

Usul __iter__()shunga o'xshash ishlaydi, siz operatsiyalarni bajarishingiz mumkin (boshlash va h.k.), lekin har doim iterator ob'ektining o'zini qaytarishingiz kerak.

Usul __next__()shuningdek, operatsiyalarni bajarishga imkon beradi va keyingi elementni ketma-ketlikda qaytarishi kerak.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Misol
1 dan boshlab raqamlarni qaytaruvchi iterator yarating va har bir ketma-ketlik bittaga ko'payadi (qaytaruvchi 1,2,3,4,5 va hokazo):

class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Iteratsiyani to'xtatish
Yuqoridagi misol, agar sizda yetarlicha next() iboralari bo'lsa yoki u tsiklda ishlatilsa, abadiy davom etadi for.

Takrorlashning abadiy davom etishiga yo'l qo'ymaslik uchun biz StopIterationbayonotdan foydalanishimiz mumkin.

Usulda __next__(), agar takrorlash ma'lum bir necha marta bajarilsa, xatoni ko'tarish uchun tugatish shartini qo'shishimiz mumkin:

Misol
20 ta takrorlashdan keyin to'xtating:

class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)


